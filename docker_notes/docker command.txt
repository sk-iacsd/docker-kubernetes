* docker run = docker create + docker -a start

1) override default command

2)listing rinning container -- docker ps

3) listing all the container --- docker ps --all

4) restarting stopped container ----- docker start -a <cont_id>   ------ without -a no output will be returned

5) removing stopped container ---- docker system prune 

6) retrieve logs ---- docker logs <cont_id>   ---- this will return all the logs without runing or creating the container. good for debug

7) Stoppoing the container --- 
	a) docker stop <c_id> ---- this will do cleaning activities first and then terminate if not completed the activity in 10 secs then execute kill command internally
	b) docker kill <c_id> ---- This directly kill the container

8) Running commands inside the running container--- docker exec -it <c_id> <command>
	exmample: docker exec -it e8c6fec874ac redis-cli     ------- e8c6fec874ac  is running container of redis
	Once I am inside the container I can write the redis commands
		127.0.0.1:6379> set myname Shubham   --- set myname=shubham
		127.0.0.1:6379> get myname  --- returns the value of myname
	Here the -it = -i -t
		-i = This connects to the imput channel of the container(stdin), and also provide the permission to input
		-t = This is for well formated output from the container to local terminal
 
9) Command prompt in the container ---- docker exec -it <c_id> sh
	This will open the shell processor in the container. there are different command processors like bash, powershell, zsh and sh.
	Once the command is executed we will be in that container and execute the shell script there.
	
	prompt can be used with the ------ docker run -it <image_name> sh

10) Docker containers are isolated from each other 

11) Creating Docker image:
	a) Dockerfile
		FROM 		
			1)specify the base image for our new docker image
		WORKDIR COPY(dependencies) RUN COPY(directory)
			2)define Workdir, copy the folder and Run commands to add additional dependancies
		CMD	
			3) specify command to run the container startup
	2) To see more verbose use progress flag in docker while build
		----- docker build --progress=plain .
			=========OR=========
		----- docker build --no-cache --progress=plain .   ----- created new image without useing the previous cache
	Order of the run command does matter while build. if we keep the same order then build will use the existing image else it will again fetch/download
	3) Tagging the image
		docker build -t shubhamkh29/redis:latest .
		-t = tag
		shubhamkh29 = docker id
		redis = repo/project name
		latest = version
		. = current directory from where files and folders should be picked in the container

12) Image generation with docker commit from running container  ----- Try to use Dockerfile only instead of commiting new image for best practices
	Start the container - <docker run image> or <docker start container>
	then connect to input channel of the container -- <docker exec -it container sh> other option to do this while running the container like <docker run -it image sh>
	install more dependencies then commit in new image
	a) windows user - docker commit -c <"CMD 'redis-server'"> <running CONTAINERID> <docker_id/repo:latest>
	b) other users - docker commit -c <'CMD ["redis-server"]'> <CONTAINERID> <docker_id/repo:latest>

13) Container Port Maping
	---- docker run -p <local_port ex-8080>:<container_port ex-5050> <image_id>
	Make sure that app inside the container is running on example port-5050
